<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Introduction on The Command Book</title>
    <link>https://thecommandbook.clox.nu/</link>
    <description>Recent content in Introduction on The Command Book</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>cn-zh</language><atom:link href="https://thecommandbook.clox.nu/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>KMP 算法</title>
      <link>https://thecommandbook.clox.nu/docs/algorithm/kmp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://thecommandbook.clox.nu/docs/algorithm/kmp/</guid>
      <description>KMP 算法 #  Knuth-Morris-Pratt 字符串查找算法 （简称为 KMP 算法）可在一个字符串 S 内查找一个词 W 的出现位置。一个词在不匹配时本身就包含足够的信息来确定下一个匹配可能的开始位置，此算法利用这一特性以避免重新检查先前匹配的字符。
以下示例是在 s 中寻找 p
样例：
   p a b a b a b c a     idx 0 1 2 3 4 5 6 7   PMT 0 0 1 2 3 4 0 1   next -1 0 0 1 2 3 4 0    PMT (Partial Match Table) 部分匹配表，是指字符串的前缀集合与后缀集合的交集中最长元素的长度</description>
    </item>
    
    <item>
      <title>二叉树</title>
      <link>https://thecommandbook.clox.nu/docs/algorithm/binary-tree/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://thecommandbook.clox.nu/docs/algorithm/binary-tree/</guid>
      <description>二叉树 #  二叉树 (Binary tree) 是每个节点最多只有两个分支的树结构。其结构定义如下：
class TreeNode: def __init__(self, value, left=None, right=None): self.value = value self.left = left self.right = right def visit(self): print(self.value, end=&amp;#34; &amp;#34;) # 访问当前结点 遍历 #  树的遍历 是图的遍历的一种，指的是按照某种规则，不重复地访问某种树的所有节点的过程。
遍历可分为 深度优先遍历 和 广度优先遍历，深度优先遍历又分为 前序遍历 (Pre-Order Traversal)、中序遍历 (In-Order Traversal)、后序遍历 (Post-Order Traversal)；而广度优先搜索则对应 层序遍历。
测试树如下：
 A / \ B C / \ / \ D E F G / \ H I 正确的前序遍历： A B D E C F H I G 正确的中序遍历： D B E A H F I C G 正确的后序遍历： D E B H I F G C A 正确的层序遍历： A B C D E F G H I test = TreeNode(&amp;#39;A&amp;#39;, left=TreeNode(&amp;#39;B&amp;#39;, left=TreeNode(&amp;#39;D&amp;#39;), right=TreeNode(&amp;#39;E&amp;#39;)),right=TreeNode(&amp;#39;C&amp;#39;, left=TreeNode(&amp;#39;F&amp;#39;, left=TreeNode(&amp;#39;H&amp;#39;), right=TreeNode(&amp;#39;I&amp;#39;)), right=TreeNode(&amp;#39;G&amp;#39;))) 递归形式 #  前序遍历 def preorder(node: TreeNode): if node is None: return node.</description>
    </item>
    
    <item>
      <title>单调栈</title>
      <link>https://thecommandbook.clox.nu/docs/algorithm/mono-stack/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://thecommandbook.clox.nu/docs/algorithm/mono-stack/</guid>
      <description>单调栈 #  为什么要用单调栈？单调栈的作用是什么？
单调栈能在   \(O(n)\)  时间内找到一个 list 中所有值左边第一次比它大/小的元素和右边第一个比它大/小的元素
举个例子，[2, 3, 4, 7, 8, 6, 0, 1] 中 &amp;ldquo;2&amp;rdquo; 右边第一个比它小的元素是 &amp;ldquo;0&amp;rdquo;, &amp;ldquo;6&amp;rdquo; 右边第一个比它小的元素是 &amp;ldquo;0&amp;rdquo; 左边第一个比它小的元素是 &amp;ldquo;4&amp;rdquo;
以下 left right 数组存的是左边比当前元素大/小的元素的下标，右边比当前元素大/小的元素的下标
若要求左右边比原数小的值，则用单调递增栈，得到的 left right 数组是 (-1 代表左边没有更小的了，8 代表右边没有更小的了)
left = [-1, 0, 1, 2, 3, 2, -1, 6]；right = [6, 6, 6, 5, 5, 6, 8, 8]
若要求左右边比原数大的值，则用单调递减栈，得到的 left right 数组是 (-1 代表左边没有更大的了，8 代表右边没有更大的了)
left = [-1, -1, -1, -1, -1, 4, 5, 5]；right = [1, 2, 3, 4, 8, 8, 7, 8]</description>
    </item>
    
    <item>
      <title>并查集</title>
      <link>https://thecommandbook.clox.nu/docs/algorithm/union-find/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://thecommandbook.clox.nu/docs/algorithm/union-find/</guid>
      <description>并查集 #  并查集 | 维基百科
实现「加权规则」和「折叠规则」
使用并查集，轻松秒掉 200. 岛屿数量
本算法时间复杂度为   \(O(n \alpha(n))\)  .  \(\alpha(n)\)  是反阿克曼函数，当自变量 n 的值在人类可观测的范围内（宇宙中粒子的数量）时，函数  \(\alpha(n)\)  的值不会超过 5，因此也可以看成是常数时间复杂度。
class UnionFind: def __init__(self, all_data: list): &amp;#34;&amp;#34;&amp;#34; 初始化并查集 :param all_data: 数据列表 &amp;#34;&amp;#34;&amp;#34; self.parent = {} self.size = {} self.union_num = 0 for data in all_data: self.parent[data] = data # 初始父亲结点为自己 self.size[data] = 1 self.union_num += 1 def __repr__(self): return &amp;#34;parent: {}\nsize: {}\nunion_num: {}\n&amp;#34;.</description>
    </item>
    
    <item>
      <title>排序</title>
      <link>https://thecommandbook.clox.nu/docs/algorithm/sorting/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://thecommandbook.clox.nu/docs/algorithm/sorting/</guid>
      <description>排序 #  排序算法 是一种能将一串资料依照特定排序方式进行排列的一种算法。
堆排序 #  堆排序 (Heapsort) 是指利用堆这种数据结构所设计的一种排序算法。堆排序的平均和最差情况时间均为   \(O(n \log n)\)  ，空间为  \(O(1)\)  递归形式 def heap_sort(nums: list) -&amp;gt; list: def adjust(heap: list, start, end): left = start * 2 + 1 right = left + 1 if left &amp;gt;= end: return max_child = right if right &amp;lt; end and heap[left] &amp;lt; heap[right] else left # 选取最大的子结点 if heap[start] &amp;lt; heap[max_child]: heap[start], heap[max_child] = heap[max_child], heap[start] adjust(heap, max_child, end) # 从最后一个结点的父结点开始建堆 for i in reversed(range(len(nums) // 2)): adjust(nums, i, len(nums)) # 将最大结点交换至最后并调整堆 for i in reversed(range(len(nums))): nums[0], nums[i] = nums[i], nums[0] adjust(nums, 0, i) return nums 迭代形式 def heap_sort_iter(nums: list) -&amp;gt; list: def adjust(heap: list, start, end): while start &amp;lt; end: left = start * 2 + 1 right = left + 1 if left &amp;gt;= end: break max_child = right if right &amp;lt; end and heap[left] &amp;lt; heap[right] else left # 选取最大的子结点 if heap[start] &amp;gt;= heap[max_child]: break heap[start], heap[max_child] = heap[max_child], heap[start] start = max_child # 从最后一个结点的父结点开始建堆 for i in reversed(range(len(nums) // 2)): adjust(nums, i, len(nums)) # 将最大结点交换至最后并调整堆 for i in reversed(range(len(nums))): nums[0], nums[i] = nums[i], nums[0] adjust(nums, 0, i) return nums  归并排序 #  归并排序 (Merge sort) 是创建在归并操作上的一种有效的排序算法。归并排序的平均和最差情况时间均为  \(O(n \log n)\)  ，空间为  \(O(n)\)  类似二叉树的 后序 遍历，先 recur 左右，再 visit 自己，所以迭代采用树的后序遍历模板</description>
    </item>
    
    <item>
      <title>背包问题</title>
      <link>https://thecommandbook.clox.nu/docs/algorithm/knapsack/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://thecommandbook.clox.nu/docs/algorithm/knapsack/</guid>
      <description>背包问题 #  背包问题 是一种组合优化的NP完全问题。问题可以描述为：给定一组物品，每种物品都有自己的重量和价格，在限定的总重量内，我们如何选择，才能使得物品的总价格最高。
0-1 背包 #  0-1 背包
有 n 个物品，物品有两个属性，代价 cost，价值 value，背包在容量 space 的限制下可以装物品的最大价值？
假设物品数 n = 3；costs = [1, 2, 5]；values = [3, 7, 15]；space = 7
   j \ dp[j] \ space 0 1 2 3 4 5 6 7     init 0 0 0 0 0 0 0 0   1 0 3 3 3 3 3 3 3   1+2 0 3 7 10 10 10 10 10   1+2+3 0 3 7 10 10 15 18 22    def zero_one_back(n: int, costs: list, values: list, space: int): dp = [0] * (space + 1) for i in range(n): # 0-1 背包问题中，这两层循环不可以交换 for j in reversed(range(space + 1)): if j &amp;lt; costs[i]: break # 这里因为 j 是有序的（越来越小），所以可以用 break，否则用 continue dp[j] = max(dp[j], dp[j - costs[i]] + values[i]) return dp[space] 完全背包 #  有 n 个物品，物品的数量无限，物品有两个属性，代价 cost，价值 value，背包在容量 space 的限制下可以装物品的最大价值？</description>
    </item>
    
    <item>
      <title>链表</title>
      <link>https://thecommandbook.clox.nu/docs/algorithm/linked-list/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://thecommandbook.clox.nu/docs/algorithm/linked-list/</guid>
      <description>链表 #  链表 (Linked list) 是一种常见的基础数据结构，是一种线性表，但是并不会按线性的顺序存储数据，而是在每一个节点里存到下一个节点的指针 (Pointer)。链表的程序定义如下：
class ListNode: def __init__(self, x, next=None): self.val = x self.next = next 1. 环形链表 #  检测链表中的环
141. 环形链表
1 -&amp;gt; 2 -&amp;gt; 3 -&amp;gt; 4 | | 7 &amp;lt;- 6 &amp;lt;- 5 快慢指针，相撞即有环
def hasCycle(head: ListNode) -&amp;gt; bool: slow = fast = head while fast and fast.next: fast = fast.next.next slow = slow.next if fast == slow: return True return False 2.</description>
    </item>
    
  </channel>
</rss>
